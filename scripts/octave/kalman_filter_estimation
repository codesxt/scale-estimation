filename = '../data/data.csv';
data = csvread(filename);

% ---------------------------------------------------------------
% Motion Update
% ---------------------------------------------------------------
function mu = motion_update(mu_previous, sigma_mu)
  mu = mu_previous + normrnd(0, sigma_mu);
endfunction

% ---------------------------------------------------------------
% Observation Function
% ---------------------------------------------------------------
function mu = measurement_update(x_i, y_i, lambda, sigma_xy)
  mu = 0.5*(x_i/lambda + y_i) + normrnd(0, sigma_xy);
endfunction

% ---------------------------------------------------------------
% 1D Kalman Filter Definition
% ---------------------------------------------------------------
function [mu, sigma] = KalmanFilter_measurement(mu_i, sigma_i, mu_obs, sigma_obs)
  mu = (sigma_obs*mu_i + sigma_i*mu_obs)/(sigma_obs + sigma_i);
  sigma = 1/((1/sigma_obs)+(sigma_i));
endfunction

function [mu, sigma] = KalmanFilter_motion(mu_i, sigma_i, sigma_mu, u)
  %mu = mu_i + normrnd(0, sigma_mu);
  mu = mu_i + u;
  sigma = sigma_i;
endfunction

% ---------------------------------------------------------------
% Gaussian Probability
% Gives the probability of getting the value 'val' from the normal
% distribution described by 'mu' and 'sigma'
% ---------------------------------------------------------------
function prob = Gaussian(x, mu, sigma)
  prob = (1/sqrt(2*pi*sigma^2)) * exp((-(x-mu).^2)/(2*sigma^2));
endfunction

% ---------------------------------------------------------------
% Backward derivative
% ---------------------------------------------------------------
function d_f = BackwardDerivation(f_x, f_x_h, h)
  d_f = (f_x-f_x_h)/h;
endfunction

% ---------------------------------------------------------------
% Data Preprocessing
% ---------------------------------------------------------------
j = 1;
sz = size(data)(1);
j=1;
for i=1:sz
  if (mod(i,40) == 0)
    % Timestamps
    data2(j,1) = data(i,1);
    % True Height
    data2(j,2) = data(i,2);
    % Metric Measurements
    data2(j,3) = sum(data(i-30:i,3))/30;
    % Visual Measurements
    data2(j,4) = data(i,4);
    j=j+1;
  endif
endfor

scale_estimation(:,1) = data2(:,1);
scale_estimation(:,2) = 2;

% ---------------------------------------------------------------
% The results will be stored in the 'results' variable
% The indices are as follows:
% 1: Time stamps
% 2: Kalman Filter Height Estimation
% 3: Particle Filter Height Estimation
% ---------------------------------------------------------------
pose_mu = 0.0;
pose_sigma = 0.2;
movement_sigma = 0.05;
measurement_sigma = 0.05;

scale_estimate = 1.0;
scale_sigma = 0.1;

visual_mu = 0.0;
visual_sigma = 0.2;

sz = size(data2)(1);
for i=1:sz
  % Timestamps
  results(i,1) = data2(i,1);
  % Measurement Update
  % measurement_mu = (data2(i,3)+data2(i,4)/2.0)*0.5;
  measurement_mu =  data2(i,3);
  [pose_mu, pose_sigma] = KalmanFilter_measurement(pose_mu, pose_sigma, measurement_mu, measurement_sigma);
  % Estimated pose
  results(i,2) = pose_mu;
  % Motion Update
  #{
  if (i > 1)
    f_x = results(i,2);
    f_x_h = results(i-1,2);
    h = results(i,1) - results(i-1,1);
    u = BackwardDerivation(f_x, f_x_h, h);
    [pose_mu, pose_sigma] = KalmanFilter_motion(pose_mu, pose_sigma, movement_sigma, u);
  endif
  results(i,2) = pose_mu;
  #}
  if(i>1)
    f_x = results(i,2);
    f_x_h = results(i-1,2);
    h = results(i,1) - results(i-1,1);
    u = BackwardDerivation(f_x, f_x_h, h);
    derivates(i) = u;
  endif

  % Visual pose estimation
  measurement_mu =  data2(i,4);
  [visual_mu, visual_sigma] = KalmanFilter_measurement(visual_mu, visual_sigma, measurement_mu, measurement_sigma);
  results(i,3) = visual_mu;

  %scale_obs = data2(i,4)/pose_mu;
  scale_obs = visual_mu/pose_mu;
  #{
  window_size = 150;
  n_results = size(results)(1);
  if(i>window_size)
    scale_obs = (sum(results(i-window_size:i,3))/window_size) / (sum(results(i-window_size:i,2))/window_size)
  else
    scale_obs = (sum(results(1:i,3))/n_results) / (sum(results(1:i,2))/n_results)
  endif
  #}
  [scale_estimate, scale_sigma] = KalmanFilter_measurement(scale_estimate, scale_sigma, scale_obs, 0.2);
  %[scale_estimate, scale_sigma] = KalmanFilter_motion(scale_estimate, scale_sigma, 0.3);
  %scale_estimation(i,2) = max(min(scale_estimate, 4), -4);
  scale_estimation(i,3) = scale_estimate;
endfor

% avg = sum(scale_estimation(:,2))/(size(scale_estimation(:,2))(1))
average_scale = (sum(results(:,3))/500) / (sum(results(:,2))/500)

figure(1)
hold on;
title('Measurements');
plot(data2(:,1), data2(:,2))
plot(data2(:,1), data2(:,3))
plot(data2(:,1), data2(:,4))
legend('True Height', 'Metric Sensor', 'Visual Sensor')
hold off;

figure(2)
hold on;
plot(results(:,1), results(:,2), '-r')
plot(results(:,1), results(:,3), '-b')
plot(results(:,1), data2(:,2), '-b')
legend('KF Metric Estimation', 'KF Visual Estimation', 'Real Height')
hold off;

figure(3)
hold on;
plot(scale_estimation(:,1), scale_estimation(:,2))
plot(scale_estimation(:,1), scale_estimation(:,3))
legend('Real scale', 'Scale Estimation')
hold off;
