filename = '../data/data.csv';
data = csvread(filename);

% ---------------------------------------------------------------
% Motion Update
% ---------------------------------------------------------------
function mu = motion_update(mu_previous, sigma_mu)
  mu = mu_previous + normrnd(0, sigma_mu);
endfunction

% ---------------------------------------------------------------
% Observation Function
% ---------------------------------------------------------------
function mu = measurement_update(x_i, y_i, lambda, sigma_xy)
  mu = 0.5*(x_i/lambda + y_i) + normrnd(0, sigma_xy);
endfunction

% ---------------------------------------------------------------
% 1D Kalman Filter Definition
% ---------------------------------------------------------------
function [mu, sigma] = KalmanFilter_measurement(mu_i, sigma_i, mu_obs, sigma_obs)
  mu = (sigma_obs*mu_i + sigma_i*mu_obs)/(sigma_obs + sigma_i);
  sigma = 1/((1/sigma_obs)+(sigma_i));
endfunction

function [mu, sigma] = KalmanFilter_motion(mu_i, sigma_i, sigma_mu, u)
  %mu = mu_i + normrnd(0, sigma_mu);
  mu = mu_i + u;
  sigma = sigma_i;
endfunction

% ---------------------------------------------------------------
% Gaussian Probability
% Gives the probability of getting the value 'val' from the normal
% distribution described by 'mu' and 'sigma'
% ---------------------------------------------------------------
function prob = Gaussian(x, mu, sigma)
  prob = (1/sqrt(2*pi*sigma^2)) * exp((-(x-mu).^2)/(2*sigma^2));
endfunction

% ---------------------------------------------------------------
% Backward derivative
% ---------------------------------------------------------------
function d_f = BackwardDerivation(f_x, f_x_h, h)
  d_f = (f_x-f_x_h)/h;
endfunction

% ---------------------------------------------------------------
% Data Preprocessing
% ---------------------------------------------------------------
j = 1;
sz = size(data)(1);
j=1;
for i=1:sz
  if (mod(i,40) == 0)
    % Timestamps
    data2(j,1) = data(i,1);
    % True Height
    data2(j,2) = data(i,2);
    % Metric Measurements
    data2(j,3) = sum(data(i-30:i,3))/30;
    % Visual Measurements
    data2(j,4) = data(i,4);
    j=j+1;
  endif
endfor

% ---------------------------------------------------------------
% The results will be stored in the 'results' variable
% The indices are as follows:
% 1: Time stamps
% 2: Particle Filter Height Estimation
% ---------------------------------------------------------------
% ----------------------------------------------------
% Initialize particles
% ----------------------------------------------------
n_particles = 100;
for i=1:n_particles
  % Height
  particles(i,1) = normrnd(0, 10);
  % Scale
  particles(i,2) = abs(normrnd(1, 5));
  weights(i) = 1/n_particles;
endfor

sz = size(data2)(1);
for i=1:sz
  % ----------------------------------------------------
  % Evaluate particles with measurements
  % ----------------------------------------------------
  m_meas = data2(i,3);      % Metric height measurement
  v_meas = data2(i,4);      % Visual height measurement
  h_real = data2(i,2);      % Real height
  % Scale estimate
  if(i==1)
    s_est = sum(particles(:,2).*weights(:));
  else
    s_est = results(i-1,3);
  endif
  % Height Measurement
  h = (m_meas+v_meas/s_est)*0.5;
  % Scale Measurement
  s = (v_meas/m_meas);

  for j=1:n_particles
    g(j,1) = Gaussian(particles(j,1), h, 0.5);
    g(j,2) = Gaussian(particles(j,2), s, 0.5);
  endfor

  % ----------------------------------------------------
  % Reweighting particles
  % ----------------------------------------------------

  p = g(:,1) + g(:,2);
  %[particles(:,1) particles(:,2) g(:, 1) g(:,2) p(:)]
  weights = p/sum(p);

  [particles(:,1) particles(:,2) weights(:)];
  height_average_estimate = sum(particles(:,1).*weights(:));
  scale_average_estimate = sum(particles(:,2).*weights(:));
  [val id] = max(weights);
  height_max_estimate = particles(id,1);
  scale_max_estimate = particles(id,2);
  results(i,1) = height_average_estimate;
  results(i,2) = height_max_estimate;
  results(i,3) = scale_average_estimate;
  results(i,4) = scale_max_estimate;

  % ----------------------------------------------------
  % Resampling particles
  % ----------------------------------------------------
  csum =cumsum(weights);
  new_particles = zeros(n_particles, 2);
  for j=1:n_particles
    r = unifrnd(0,1);
    pos = sum(csum(:)<r)+1;
    %[r particles(pos, :) weights(pos)]
    new_particles(j,:) = particles(pos,:) + normrnd(0,0.3,1,2);
  endfor
  particles = new_particles;
endfor

figure(1)
hold on;
plot(data2(:,2))
plot(results(:,1), '-r');
plot(results(:,2), '-g');
legend('True Height', 'Average Estimated Height', 'Max Estimated Height')
hold off;

figure(2)
hold on;
plot(results(:,3), '-r');
plot(results(:,4), '-g');
legend('Average Estimated Scale', 'Max Estimated Scale')
hold off;
